C 언어에서 사용자 정의 system 함수를 구현하고, 이 함수를 사용하여 a.out ls -la와 같은 명령을 실행하는 예제 프로그램을 만드는 작업은 몇 가지 단계로 나눌 수 있습니다. 먼저 system 함수와 유사한 기능을 하는 사용자 정의 함수를 만들고, 이후에 이 함수를 사용하는 메인 프로그램을 작성합니다.

1. 사용자 정의 system 함수 구현 (my_system)
사용자 정의 system 함수는 기본적으로 fork, exec, wait 시스템 호출을 사용하여 구현할 수 있습니다. 아래 코드는 my_system이라는 사용자 정의 함수를 구현한 예시입니다:

c
Copy code
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <stdio.h>

int my_system(const char *command) {
    pid_t pid = fork();

    if (pid == -1) {
        // fork 실패
        perror("fork");
        return -1;
    } else if (pid == 0) {
        // 자식 프로세스
        execlp("sh", "sh", "-c", command, (char *)NULL);
        _exit(EXIT_FAILURE);  // execlp가 실패하면 실행
    } else {
        // 부모 프로세스
        int status;
        waitpid(pid, &status, 0);  // 자식 프로세스의 종료를 기다림
        return WEXITSTATUS(status);
    }
}
2. 메인 프로그램 구현
메인 프로그램에서는 my_system 함수를 사용하여 사용자로부터 입력받은 명령을 실행합니다. 아래 코드는 argc와 argv를 사용하여 커맨드 라인 인자를 받아들이고, my_system 함수로 해당 명령을 실행하는 메인 프로그램의 예시입니다:

c
Copy code
int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "사용법: %s <명령>\n", argv[0]);
        return 1;
    }

    // 명령어 조합
    char command[1024];
    strcpy(command, argv[1]);
    for (int i = 2; i < argc; i++) {
        strcat(command, " ");
        strcat(command, argv[i]);
    }

    // 사용자 정의 system 함수 실행
    my_system(command);

    return 0;
}
이 프로그램은 실행될 때 명령줄 인수를 받아들여 my_system 함수에 전달합니다. 예를 들어, a.out ls -la 형태로 실행할 경우, ls -la가 my_system 함수로 전달되어 실행됩니다.

컴파일 및 실행
위 코드들을 main.c 파일에 넣고 다음과 같이 컴파일합니다:

bash
Copy code
gcc main.c -o a.out
그리고 다음과 같이 실행합니다:

bash
Copy code
./a.out ls -la
이렇게 하면 ls -la 명령이 my_system 함수를 통해 실행되며, 현재 디렉터리의 파일 목록이 표시됩니다.

